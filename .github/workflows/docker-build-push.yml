name: Build and Push Docker Image
on:
  push:
    branches: [ "main" ]
    paths:
      - '.version' # ‰ªÖÂΩì .version Êñá‰ª∂ÂèòÂåñÊó∂Ëß¶Âèë
  pull_request:
    branches: [ "main" ]
    paths:
      - '.version' # PR ‰∏≠ .version Êñá‰ª∂ÂèòÂåñÊó∂‰πüËß¶Âèë
  # ‰πüÂèØ‰ª•ÊâãÂä®Ëß¶Âèë
  workflow_dispatch:
jobs:  
  build-and-push:  
    runs-on: ubuntu-latest  
    permissions:  
      contents: read  
      packages: write  
    steps:  
      - name: Checkout repository  
        uses: actions/checkout@v4  
      - name: Set up Docker Buildx  
        uses: docker/setup-buildx-action@v3  
      # ÁôªÂΩïÂà∞ GitHub ÂÆπÂô®‰ªìÂ∫ì  
      - name: Login to GitHub Container Registry  
        uses: docker/login-action@v3  
        with:  
          registry: ghcr.io  
          username: ${{ github.repository_owner }}  
          password: ${{ secrets.GITHUB_TOKEN }}  
      # ‰ªé .version Êñá‰ª∂ËØªÂèñÈ°πÁõÆÂêçÁß∞ÂíåÁâàÊú¨Âè∑
      - name: Extract project info from .version file
        id: project-info
        run: |
          # Ëß£Êûê .version Êñá‰ª∂
          PROJECT_NAME=$(grep '^project_name=' .version | cut -d'=' -f2)
          VERSION=$(grep '^version=' .version | cut -d'=' -f2)

          # ËÆæÁΩÆËæìÂá∫ÂèòÈáè
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            # ‰∏ªÂàÜÊîØÊé®ÈÄÅÔºå‰ΩøÁî® v{version} Ê†ºÂºè
            echo "TAG=v${VERSION}" >> $GITHUB_OUTPUT
          else
            # PR ÊàñÂÖ∂‰ªñÊÉÖÂÜµÔºå‰ΩøÁî®Êó•ÊúüÂíå SHA
            SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)
            DATE=$(date +'%Y%m%d')
            echo "TAG=v${VERSION}-${DATE}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

          echo "Using project name: $PROJECT_NAME"
          echo "Using version: $VERSION"

      - name: Build and Push Multi-Architecture Images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ steps.project-info.outputs.PROJECT_NAME }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ steps.project-info.outputs.PROJECT_NAME }}:${{ steps.project-info.outputs.TAG }}
      
      # ËæìÂá∫ÊûÑÂª∫ÊëòË¶Å‰ø°ÊÅØ
      - name: Build Summary
        run: |
          echo "üöÄ Build Summary"
          echo "==============================================="
          echo ""
          echo "üìã Build Information:"
          echo "  Event Type:        ${{ github.event_name }}"
          echo "  Branch/Tag:        ${{ github.ref_name }}"
          echo "  Commit SHA:        ${{ github.sha }}"
          echo "  Build Duration:    $(date -u)"
          echo "  Architectures:     linux/amd64, linux/arm64"
          echo "  Docker Repository: ghcr.io/${{ github.repository_owner }}/${{ steps.project-info.outputs.PROJECT_NAME }}"
          echo "  Package Name:      ${{ steps.project-info.outputs.PROJECT_NAME }}"
          echo "  Package Version:   ${{ steps.project-info.outputs.VERSION }}"
          echo "  Action:            ‚úÖ Built and Pushed"
          echo "  Registry:          GitHub Container Registry"
          echo ""
          echo "üè∑Ô∏è Generated Tags:"
          echo "  ghcr.io/${{ github.repository_owner }}/${{ steps.project-info.outputs.PROJECT_NAME }}:latest"
          echo "  ghcr.io/${{ github.repository_owner }}/${{ steps.project-info.outputs.PROJECT_NAME }}:${{ steps.project-info.outputs.TAG }}"
          echo ""
          echo "üí° Usage Examples:"
          echo "  # Pull latest version (recommended)"
          echo "  docker pull ghcr.io/${{ github.repository_owner }}/${{ steps.project-info.outputs.PROJECT_NAME }}:latest"
          echo ""
          echo "  # Pull specific version"
          echo "  docker pull ghcr.io/${{ github.repository_owner }}/${{ steps.project-info.outputs.PROJECT_NAME }}:${{ steps.project-info.outputs.TAG }}"
          echo ""
          echo "  # Run container"
          echo "  docker run -p 3000:3000 ghcr.io/${{ github.repository_owner }}/${{ steps.project-info.outputs.PROJECT_NAME }}:latest"
          echo ""
          echo "==============================================="
